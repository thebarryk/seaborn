# RECREATE GRAPHS USING MATPLOTLIB!

You are working as a high school math teacher. You want to display important metrics about your current class and the ones you have taught in previous years, in order to understand patterns and trends that may not be visible from just seeing the numbers in a spreadsheet.



from matplotlib import pyplot as plt
import numpy as np



### Bar Chart with Error


past_years_averages = [82, 84, 83, 86, 74, 84, 90]
years = [2000, 2001, 2002, 2003, 2004, 2005, 2006]
error = [1.5, 2.1, 1.2, 3.2, 2.3, 1.7, 2.4]

fig = plt.figure(figsize=(10,8))
ax = plt.subplot()

xpos = list(range(len(years)))
plt.bar(xpos, past_years_averages, yerr=error, capsize=5)

plt.title('Final Exam Averages')
plt.xlabel('Year')
plt.ylabel('Test Average')

ax.set(xlim=(-0.5, 6.5))
ax.set(ylim=(70,95))
ax.set_xticks(xpos)
ax.set_xticklabels(years)
plt.savefig('my_bar_chart.png')
plt.show()


### Side By Side Bars

Displays the differences in average test scores between students who went to two different middle schools before enrolling in your high school


unit_topics = ['Limits', 'Derivatives', 'Integrals', 'Diff Eq', 'Applications']
middle_school_a = [80, 85, 84, 83, 86]
middle_school_b = [73, 78, 77, 82, 86]

def create_x(t, w, n, d):
    # t ... # of datasets = # bars in each group
    # w ... width of bars. Usually 0.8
    # n ... The desired dataset, 1st bar, 2nd bar in groups
    # d ... Number of groups of bars = # of categories
    return [t*x + w*n for x in range(d)]

# Num of bars = number of categories. Make a list for the ticks
xpos = list(range(len(unit_topics)))

# Because this is a side-by-side abr chart, we have to offset them 
# on the x-axis using the create_x function.
school_a_x = create_x(2, 0.8, 1, len(xpos))
school_b_x = create_x(2, 0.8, 2, len(xpos))

# Place the label at the middle of each group
middle_x = [(x+y)/2 for x,y in zip(school_a_x, school_b_x)]

# Start a figure, set the size and point to axis object
fig, ax = plt.subplots(figsize=(10,8))

# Select portion of y-axis to show 
ax.set(ylim=(70,90))

# Place the xticks in the middle of each group 
# and label them with the category names
ax.set_xticks(middle_x)
ax.set_xticklabels(unit_topics)

# Add a bar chart to the groups for each dataset
plt.bar(school_a_x, middle_school_a, label='Middle School A')
plt.bar(school_b_x, middle_school_b, label='Middle School B')

# Label the features of the chart
plt.legend()
plt.title('Test Averages on Different Units')
plt.xlabel('Unit')
plt.ylabel('Test Average')

# Save the figure to a file
plt.savefig('my_side_by_side.png')
plt.show()


### Stacked Bars
Now, we are going to look at the chart called stacked-bars.png. This graph displays the breakdown of students who got As, Bs, Cs, Ds, and Fs in each unit.


unit_topics = ['Limits', 'Derivatives', 'Integrals', 'Diff Eq', 'Applications']

As = [6, 3, 4, 3, 5]
Bs = [8, 12, 8, 9, 10]
Cs = [13, 12, 15, 13, 14]
Ds = [2, 3, 3, 2, 1]
Fs = [1, 0, 0, 3, 0]

x = range(5)

# We import numpy at top ...
c_bottom = np.add(As, Bs)

# create d_bottom and f_bottom here by summing those below
d_bottom = np.add(c_bottom, Cs)
f_bottom = np.add(d_bottom, Ds)

#create your plot here

fig = plt.figure(figsize=(10,8))
ax = plt.axes()
xpos = list(range(len(unit_topics)))

# Use bar for each set of data
plt.bar(xpos, As, label='A')
plt.bar(xpos, Bs, bottom=As, label='B')
plt.bar(xpos, Cs, bottom=c_bottom, label='C')
plt.bar(xpos, Ds, bottom=d_bottom, label='D')
plt.bar(xpos, Fs, bottom=f_bottom, label='F')

plt.legend()
plt.title('Grade distribution')
plt.xlabel('Unit')
plt.ylabel('Number of Students')

# Label the axes with the category names
ax.set_xticks(xpos)
ax.set_xticklabels(unit_topics)

plt.savefig('my_stacked_bar.png')
plt.show()


### Two Histograms on a Plot
Display the breakdown of final exam scores between your first year of teaching vs your second year of teaching.


exam_scores1 = [62.58, 67.63, 81.37, 52.53, 62.98, 72.15, 59.05, 73.85, 97.24, 76.81, 89.34, 74.44, 68.52, 85.13, 90.75, 70.29, 75.62, 85.38, 77.82, 98.31, 79.08, 61.72, 71.33, 80.77, 80.31, 78.16, 61.15, 64.99, 72.67, 78.94]
exam_scores2 = [72.38, 71.28, 79.24, 83.86, 84.42, 79.38, 75.51, 76.63, 81.48,78.81,79.23,74.38,79.27,81.07,75.42,90.35,82.93,86.74,81.33,95.1,86.57,83.66,85.58,81.87,92.14,72.15,91.64,74.21,89.04,76.54,81.9,96.5,80.05,74.77,72.26,73.23,92.6,66.22,70.09,77.2]

# Start 10 x 8 figure and point to axes object
fig = plt.figure(figsize=(10,8))
ax = plt.axes()

# Use hist for each set of data
plt.hist(exam_scores1, bins=12, density=True, \
         histtype='step', linewidth=4, label='1st Yr Teaching')
plt.hist(exam_scores2, bins=12, density=True, \
         histtype='step', linewidth=4, label='2nd Yr Teaching')

plt.title('Final Exam Score Distribution')
plt.xlabel('Percentage')
plt.ylabel('Number of Students')
plt.legend()   # Uses labels assigned in plt.hist

plt.savefig('my_histogram.png')
plt.show


### Labeled Pie Chart
Display what students think the hardest topic covered throughout your math course is.


unit_topics = ['Limits', 'Derivatives', 'Integrals', 'Diff Eq', 'Applications']
num_hardest_reported = [1, 3, 10, 15, 1]

fig = plt.figure(figsize=(10, 8))
ax = plt.subplot()

plt.axis('equal')
plt.pie(num_hardest_reported, labels=unit_topics, autopct='%d%%')

plt.title('Hardest Topics')

plt.savefig('my_pie_chart.png')
plt.show()


### Line with Shaded Error
Display the relationship between the time students say they studied and the scores they received on their final exams.


hours_reported =[3, 2.5, 2.75, 2.5, 2.75, 3.0, 3.5, 3.25, 3.25, 3.5, 3.5, 3.75, 3.75, \
                 4, 4.0, 3.75,  4.0, 4.25, 4.25, 4.5, 4.5, 5.0, 5.25, 5, 5.25, 5.5, 5.5, 5.75, 5.25, 4.75]
exam_scores = [52.53, 59.05, 61.15, 61.72, 62.58, 62.98, 64.99, 67.63, 68.52, 70.29, 71.33, \
               72.15, 72.67, 73.85, 74.44, 75.62, 76.81, 77.82, 78.16, 78.94, 79.08, 80.31, \
               80.77, 81.37, 85.13, 85.38, 89.34, 90.75, 97.24, 98.31]

# Create your figure here

fig = plt.figure(figsize=(10,8))
ax = plt.subplot()

# Create your hours_lower_bound and hours_upper_bound lists here 
err = .2
hours_lower_bound = [(1-err)*x for x in hours_reported]
hours_upper_bound = [(1+err)*x for x in hours_reported]

# Make your graph here
plt.plot(exam_scores, hours_reported, linewidth=2)
plt.fill_between(exam_scores, hours_lower_bound, hours_upper_bound, alpha=0.2)

plt.title('Time spent studying vs final exam scores')
plt.xlabel('Score')
plt.ylabel('Hours studying (self-reported)')
plt.savefig('my_line_graph.png')
plt.show()


